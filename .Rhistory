a <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5), nrows=5, ncol=2 ))
a = matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5), nrows=5, ncol=2 ))
## Put comments here that give an overall description of what your
## functions do
a
## Write a short comment describing this function
a <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5), nrows=5, ncol=2 )
a <- matrix(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5), nrow=5, ncol=2 )
a
solve(a)
a <- matrix(c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5), nrow=5, ncol=2 )
a <- matrix(c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5), nrow=5, ncol=5 )
a
solve(a)
a <- matrix(c(2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5), nrow=5, ncol=5 )
solve(a)
a
a <- matrix(c(2, 2, 2, 5, 2, 3, 3, 3, 3, 7, 4, 4, 9, 4, 4, 1, 1, 8, 1, 1, 5, 5, 1, 5, 5), nrow=5, ncol=5 )
a
solve(a)
makeCacheMatrix <- function(x = matrix()) {
z <- solve(x)
m <<- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
getmatrix <- function() x
setmatrixinverse <- function(matrix) m <<- z
getmatrixinverse <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix, setmatrixinverse = setmatrixinverse,
getmatrixinverse = getmatrixinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getmatrixinverse()
if(!is.null(m)) {
message("getting cached inverse of matrix")
return(m)
}
read <- x$getmatrix()
m <- matrix(read)
x$setmatrixinverse(m)
x$getmatrixinverse()        ## Return a matrix that is the inverse of 'x'
}
x<- matrix(c(9, 8, 7, 9, 9, 5, 7, 4, 1), nrow=3, ncol=3)
x1 <- makeCacheMatrix(x)
x1$setmatrix(x)
x1$getmatrix()
x1$getmatrixinverse()
cacheSolve(x1)
